/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __log_event_hpp__
#define __log_event_hpp__

class log_event
{
    public:
        bool       system_running_status;

        bool       velodyne_power_status;

        bool       ibeo_power_status;

        bool       esr_power_status;

        bool       me3_power_status;

        bool       gps_ins_power_status;

        bool       hd_map_power_status;

        int8_t     gps_mode;

        bool       velodyne_data_status;

        bool       velodyne_process_status;

        bool       ibeo_data_status;

        bool       ibeo_process_status;

        bool       esr_data_status;

        bool       esr_process_status;

        bool       me3_data_status;

        bool       me3_process_status;

        bool       adp_status;

        int8_t     human_behavior;

        int8_t     autonoumos_mode;

        int8_t     autonomous_behavior;

        bool       failed;

        bool       sunny;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "log_event"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int log_event::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int log_event::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int log_event::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t log_event::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* log_event::getTypeName()
{
    return "log_event";
}

int log_event::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = this->system_running_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->velodyne_power_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->ibeo_power_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->esr_power_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->me3_power_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->gps_ins_power_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->hd_map_power_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->gps_mode, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->velodyne_data_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->velodyne_process_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->ibeo_data_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->ibeo_process_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->esr_data_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->esr_process_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->me3_data_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->me3_process_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->adp_status._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->human_behavior, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->autonoumos_mode, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->autonomous_behavior, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->failed._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->sunny._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int log_event::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = this->system_running_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->velodyne_power_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->ibeo_power_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->esr_power_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->me3_power_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->gps_ins_power_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->hd_map_power_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->gps_mode, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->velodyne_data_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->velodyne_process_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->ibeo_data_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->ibeo_process_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->esr_data_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->esr_process_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->me3_data_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->me3_process_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->adp_status._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->human_behavior, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->autonoumos_mode, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->autonomous_behavior, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->failed._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->sunny._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int log_event::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->system_running_status._getEncodedSizeNoHash();
    enc_size += this->velodyne_power_status._getEncodedSizeNoHash();
    enc_size += this->ibeo_power_status._getEncodedSizeNoHash();
    enc_size += this->esr_power_status._getEncodedSizeNoHash();
    enc_size += this->me3_power_status._getEncodedSizeNoHash();
    enc_size += this->gps_ins_power_status._getEncodedSizeNoHash();
    enc_size += this->hd_map_power_status._getEncodedSizeNoHash();
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += this->velodyne_data_status._getEncodedSizeNoHash();
    enc_size += this->velodyne_process_status._getEncodedSizeNoHash();
    enc_size += this->ibeo_data_status._getEncodedSizeNoHash();
    enc_size += this->ibeo_process_status._getEncodedSizeNoHash();
    enc_size += this->esr_data_status._getEncodedSizeNoHash();
    enc_size += this->esr_process_status._getEncodedSizeNoHash();
    enc_size += this->me3_data_status._getEncodedSizeNoHash();
    enc_size += this->me3_process_status._getEncodedSizeNoHash();
    enc_size += this->adp_status._getEncodedSizeNoHash();
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += this->failed._getEncodedSizeNoHash();
    enc_size += this->sunny._getEncodedSizeNoHash();
    return enc_size;
}

uint64_t log_event::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == log_event::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, (void*)log_event::getHash };

    uint64_t hash = 0x7ee378b065555b7aLL +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp) +
         bool::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
